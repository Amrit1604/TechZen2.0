const express = require('express');
const http = require('http');
const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const FileStore = require('session-file-store')(session);
const socketIO = require('socket.io');
const fs = require('fs');
const path = require('path');
const { GoogleGenerativeAI } = require("@google/generative-ai");
const setupCustomerSockets = require('./customer.js');
const sellRouter = require('./sell.js');

require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = socketIO(server);

// Mount the sell router at /api
app.use('/api', sellRouter);

// Middleware setup (correct order is important)
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cookieParser());

// Single session configuration (remove the duplicate)
app.use(session({
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false,
    saveUninitialized: true,
    cookie: { secure: false },
    store: new FileStore({
        path: './sessions',
        ttl: 86400
    })
}));

// Request logger middleware
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
    next();
});

// Global variables
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || "AIzaSyDI8eJG4HqF60a6snvSRYFoXns-6QPQN38";
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const sessions = new Map();


// Utility Functions
function readUsers() {
    try {
        const usersFile = path.join(__dirname, 'users.json');
        if (!fs.existsSync(usersFile)) {
            fs.writeFileSync(usersFile, JSON.stringify({}));
        }
        return JSON.parse(fs.readFileSync(usersFile, 'utf8'));
    } catch (error) {
        console.error('Error reading users file:', error);
        return {};
    }
}

function writeUsers(users) {
    try {
        fs.writeFileSync(path.join(__dirname, 'users.json'), JSON.stringify(users, null, 2));
    } catch (error) {
        console.error('Error writing users file:', error);
    }
}

function generateSessionId() {
    return Math.random().toString(36).substring(2) + Date.now().toString(36);
}

function saveUserData(userData) {
    const filePath = path.join(__dirname, 'userdata.json');
    let existingData = [];
    
    if (fs.existsSync(filePath)) {
        try {
            const fileContent = fs.readFileSync(filePath, 'utf8');
            existingData = JSON.parse(fileContent);
        } catch (error) {
            console.error('Error reading existing data:', error);
        }
    }

    const newData = {
        ...userData,
        timestamp: new Date().toISOString()
    };
    existingData.push(newData);

    try {
        fs.writeFileSync(filePath, JSON.stringify(existingData, null, 2));
        console.log('User data saved successfully');
    } catch (error) {
        console.error('Error saving user data:', error);
    }
}

// Static File Serving
app.use(express.static(__dirname));

// Routes
const routes = {
    '/': 'index.html',
    '/login': 'login.html',
    '/ContactUs': 'ContactUs.html',
    '/home': 'home.html',
    '/ai': 'ai.html',
    '/news': 'news.html',
    '/gadgets': 'gadget.html',
    '/subscribe': 'subscribe.html',
    '/blogs': 'blog.html',
    '/customer': 'customer.html',
    '/admin': 'admin1604.html',  // Add this line for admin route
    '/chatbot': 'chatbot.html',
    '/about': 'AboutUs.html',
    '/selling': 'selling.html',
};

// Middleware to check authentication for protected routes
const protectedRoutes = ['/home', '/ai', '/news', '/gadgets', '/subscribe', '/customer',  '/chatbot'];
app.use((req, res, next) => {
    if (protectedRoutes.includes(req.path)) {
        const sessionId = req.cookies.sessionId;
        console.log(`Route ${req.path} access attempted with sessionId: ${sessionId}`);
        console.log(`Session exists: ${sessions.has(sessionId)}`);
        
        if (!sessionId || !sessions.has(sessionId)) {
            return res.redirect('/login');
        }
    }
    next();
});





// Make sure uploads directory is served statically
app.use('/uploads', express.static(path.join(__dirname, 'public/uploads')));

// Ensure the uploads directory exists
const uploadDir = path.join(__dirname, 'public/uploads');
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
}

// Authentication Routes
app.post('/signup', (req, res) => {
    try {
        const { username, email, password } = req.body;
        const users = readUsers();

        if (users[username]) {
            return res.status(409).json({ error: 'Username already exists' });
        }

        users[username] = { email, password };
        writeUsers(users);

        res.status(200).json({ success: true });
    } catch (err) {
        res.status(500).json({ error: 'Server error' });
    }
});

// Update the login route to handle both paths
app.post(['/login', '/api/login'], (req, res) => {
    try {
        console.log('Login attempt:', req.body);
        const { username, password } = req.body;
        const users = readUsers();
        
        console.log('Users database:', users);
        console.log('User exists?', !!users[username]);
        
        if (!users[username] || users[username].password !== password) {
            return res.status(401).json({ error: 'Invalid credentials' });
        }

        const sessionId = generateSessionId();
        sessions.set(sessionId, { username });
        console.log('Session created:', sessionId);
        
        res.cookie('sessionId', sessionId, { httpOnly: true, path: '/' });
        res.status(200).json({ redirect: '/home' });
    } catch (err) {
        console.error('Login error:', err);
        res.status(500).json({ error: 'Server error' });
    }
});

app.get('/api/user', (req, res) => {
    const sessionId = req.cookies.sessionId;
    
    if (sessionId && sessions.has(sessionId)) {
        const sessionData = sessions.get(sessionId);
        res.status(200).json({ 
            username: sessionData.username || 'User'
        });
    } else {
        res.status(401).json({ error: 'Not logged in' });
    }
});

app.post('/logout', (req, res) => {
    const sessionId = req.cookies.sessionId;
    
    if (sessionId) {
        sessions.delete(sessionId);
    }

    res.clearCookie('sessionId');
    res.status(200).json({ success: true });
});

// Catch-all route for static files
app.get('*', (req, res) => {
    const route = routes[req.path];
    if (route) {
        res.sendFile(path.join(__dirname, route));
    } else {
        res.status(404).send('Not Found');
    }
});

// Chatbot API
app.post('/chatbot', async (req, res) => {
    try {
        const userPrompt = req.body.prompt || req.body.message;
        
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
        const result = await model.generateContent(userPrompt);
        const response = result.response.text();
        
        res.status(200).json({ 
            message: response,
            success: true 
        });
    } catch (err) {
        console.error('Error in chatbot API:', err);
        res.status(500).json({ 
            error: 'Failed to process request',
            details: err.message 
        });
    }
});

setupCustomerSockets(io);

// Start Server
const PORT = process.env.PORT || 8081;
server.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));