<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= pageTitle %></title>
    <script src="<%= loaderScriptPath %>"></script>
    <script>
        (function() {
            initLoader('home');
        })();
    </script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&family=Roboto:wght@400;500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="<%= cssPath %>">
    <link rel="icon" href="<%= faviconPath %>" type="image/x-icon">
</head>
<body>
    <!-- Navbar -->
    <header class="nav-header">
        <div class="nav-container">
            <nav class="nav-links" style="margin-left: -90px;">
                <div class="logo">
                    <a href="/home"><img src="<%= logoPath %>" alt="<%= siteName %>" style="width: 100px; border-radius: 50%;"></a>
                </div>
                <% navLinks.forEach(link => { %>
                    <button class="nav-btn" onclick="location.href='<%= link.href %>'"><%= link.text %></button>
                <% }); %>

                <!-- User Profile -->
                <div class="user-profile" onclick="openProfileModal()">
                    <div id="username-display">
                        <i class="fas fa-user-circle"></i>
                        <span id="username-text"><%= user ? user.username : 'Guest' %></span>
                    </div>
                </div>

                <button class="logout-btn" onclick="logout()">Logout</button>
            </nav>
            <button class="mobile-menu-btn" title="btnn">
                <i class="fas fa-bars"></i>
            </button>
        </div>
    </header>

    <!-- Hero Section -->
<section class="hero">
    <video class="hero-video" autoplay loop muted>
        <source src="<%= heroVideoPath %>" type="video/mp4">
    </video>
    <div class="hero-overlay"></div>
    <div class="hero-content">
        <h1 class="hero-title"><%= siteName %></h1>
        <p class="hero-subtitle"><%= heroSubtitle %></p>
        <button>LET'S GO!</button>
    </div>
</section>


    <!-- Chatbot Iframe -->
    <div id="chatbot-container" style="max-width: 2000px; max-height: 1200px;" class="sticky-chat">
        <iframe src="/chatbot" width="1000px" id="chatbot-frame"></iframe>
    </div>

    <!-- Categories -->
    <section class="categories-wrapper">
        <div class="section-background"></div>
        <section class="categories">
            <h2>Explore Tech Topics</h2>
            <div class="category-grid">
                <% categories.forEach(category => { %>
                    <a href="<%= category.href %>" class="category-card">
                        <img src="<%= category.imgSrc %>" alt="<%= category.title %>">
                        <h3><%= category.title %></h3>
                        <p><%= category.description %></p>
                    </a>
                <% }); %>
            </div>
        </section>
    </section>

    <div class="divider"></div>

    <!-- Latest News -->
    <section class="news-wrapper">
        <div class="section-background"></div>
        <section class="latest-news">
            <h2>Latest News</h2>
            <div class="news-grid">
                <% newsItems.forEach(item => { %>
                    <div class="news-card">
                        <img src="<%= item.imgSrc %>" alt="<%= item.title %>">
                        <div class="news-content">
                            <span class="news-tag"><%= item.tag %></span>
                            <h3><%= item.title %></h3>
                            <p><%= item.description %></p>
                            <a href="<%= item.href %>" class="read-more">Read More <span>â†’</span></a>
                        </div>
                    </div>
                <% }); %>
            </div>
        </section>
    </section>

    <div class="divider"></div>


    <!-- Profile Edit Modal -->
<div id="profileModal" class="modal">
    <div class="modal-content">
        <span class="close-btn" onclick="closeProfileModal()">&times;</span>
        <h2>Edit Profile</h2>
        <form id="profileEditForm">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="currentPassword">Current Password (required to save changes)</label>
                <input type="password" id="currentPassword" name="currentPassword" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password (leave blank to keep current)</label>
                <input type="password" id="newPassword" name="newPassword">
            </div>
            <div class="form-group">
                <label for="confirmPassword">Confirm New Password</label>
                <input type="password" id="confirmPassword" name="confirmPassword">
            </div>
            <div class="form-actions">
                <button type="button" onclick="closeProfileModal()">Cancel</button>
                <button type="submit">Save Changes</button>
            </div>
        </form>
    </div>
</div>

<!-- Success Notification -->
<div id="successNotification" class="notification">
    <div class="notification-content">
        <i class="fas fa-check-circle"></i>
        <span>Success! Your account information has been updated.</span>
    </div>
</div>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-content">
            <div class="footer-section">
                <h3><%= siteName %></h3>
                <p><%= footerDescription %></p>
                <div class="social-links">
                    <% socialLinks.forEach(link => { %>
                        <a href="<%= link.href %>" class="social-link"><img src="<%= link.icon %>" alt="<%= link.name %>"></a>
                    <% }); %>
                </div>
            </div>
            
            <div class="footer-section">
                <h3>Quick Links</h3>
                <ul class="footer-links">
                    <% footerLinks.forEach(link => { %>
                        <li><a href="<%= link.href %>"><%= link.text %></a></li>
                    <% }); %>
                </ul>
            </div>
    
            <div class="footer-section">
                <h3>Newsletter</h3>
                <p>Stay updated with our latest tech news</p>
                <form class="newsletter-form" action="<%= newsletterAction %>">
                    <input type="email" placeholder="Enter your email">
                    <button type="submit">Subscribe</button>
                </form>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; <%= currentYear %> <%= siteName %>. All Rights Reserved.</p>
        </div>
    </footer>

    <script>



// User profile update
async function updateUserProfile() {
  try {
    const response = await fetch('/api/auth/user', {
      credentials: 'include'
    });
    
    if (response.ok) {
      const userData = await response.json();
      console.log('User data received:', userData);
      
      // Update the username in the navbar
      const usernameElement = document.getElementById('username-text');
      if (usernameElement && userData.username) {
        usernameElement.textContent = userData.username;
        console.log('Username updated to:', userData.username);
      }
    } else {
      console.warn('Failed to fetch user data');
    }
  } catch (error) {
    console.error('Error fetching user data:', error);
  }
}


// Profile Modal Functions
function openProfileModal() {
    const modal = document.getElementById('profileModal');
    modal.style.display = 'block';
    
    // Fetch current user data to populate the form
    fetchUserDataForEdit();
}

function closeProfileModal() {
    const modal = document.getElementById('profileModal');
    modal.style.display = 'none';
}

// Close modal if clicked outside
window.addEventListener('click', function(event) {
    const modal = document.getElementById('profileModal');
    if (event.target === modal) {
        closeProfileModal();
    }
});

// Fetch user data to populate the edit form
async function fetchUserDataForEdit() {
    try {
        const response = await fetch('/api/auth/user', {
            credentials: 'include'
        });
        
        if (response.ok) {
            const userData = await response.json();
            
            // Populate the form fields
            document.getElementById('username').value = userData.username || '';
            document.getElementById('email').value = userData.email || '';
            
            // Password fields are left empty for security
        } else {
            console.warn('Failed to fetch user data for editing');
        }
    } catch (error) {
        console.error('Error fetching user data for edit:', error);
    }
}

// Handle form submission
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('profileEditForm');
    if (form) {
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Validate passwords match if new password is provided
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (newPassword && newPassword !== confirmPassword) {
                alert('New passwords do not match');
                return;
            }
            
            // Gather form data
            const formData = {
                username: document.getElementById('username').value,
                email: document.getElementById('email').value,
                currentPassword: document.getElementById('currentPassword').value,
                newPassword: newPassword || undefined
            };
            
            try {
                const response = await fetch('/api/auth/update-profile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData),
                    credentials: 'include'
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    // Close modal
                    closeProfileModal();
                    
                    // Show success notification
                    showSuccessNotification();
                    
                    // Update displayed username
                    updateUserProfile();
                } else {
                    console.error('Profile update failed:', data);
                    alert(data.error || 'Failed to update profile');
                }
            } catch (error) {
                console.error('Error updating profile:', error);
                alert('An error occurred while updating your profile');
            }
        });
    }
});

// Show success notification
function showSuccessNotification() {
    const notification = document.getElementById('successNotification');
    notification.classList.add('show');
    
    // Remove notification after animation completes
    setTimeout(() => {
        notification.classList.remove('show');
    }, 4000);
}



        // Mobile menu toggle
        const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
        const navLinks = document.querySelector('.nav-links');
        mobileMenuBtn.addEventListener('click', () => {
            navLinks.classList.toggle('active');
            console.log('Mobile menu toggled');
        });

        // Logout function
 async function logout() {
    try {
      console.log('Logging out...');
      const response = await fetch('/api/auth/logout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include'
      });
      
      if (response.ok) {
        console.log('Logout successful');
        window.location.href = '/login';
      } else {
        console.error('Logout failed');
        alert('Logout failed. Please try again.');
      }
    } catch (error) {
      console.error('Error during logout:', error);
      alert('An error occurred during logout.');
    }
  }

    document.addEventListener('DOMContentLoaded', async function() {

            updateUserProfile();

    try {
      const response = await fetch('/api/auth/user', {
        credentials: 'include'
      });
      
      if (response.ok) {
        const userData = await response.json();
        console.log('User data:', userData);
        
        // Update username in navbar
        const usernameSpan = document.querySelector('#username-display span');
        if (usernameSpan && userData.username) {
          usernameSpan.textContent = userData.username;
        }
      } else {
        console.warn('Not authenticated, redirecting to login');
        window.location.href = '/login';
      }
    } catch (error) {
      console.error('Error checking auth:', error);
    }
  });

        // Parallax and scroll effects
window.addEventListener('scroll', () => {
    const scroll = window.pageYOffset;
    const heroContent = document.querySelector('.hero-content');
    const heroVideo = document.querySelector('.hero-video');
    
    // Apply subtle parallax effect that keeps content centered
    if (heroContent) {
        heroContent.style.transform = `translateY(${scroll * 0.3}px)`;
        heroContent.style.opacity = 1 - (scroll * 0.003);
    }
    
    if (heroVideo) {
        heroVideo.style.transform = `translateY(${scroll * 0.15}px)`;
    }
    
    // Other scroll effects remain the same
    const categoriesBackground = document.querySelector('.categories-wrapper .section-background');
    if (categoriesBackground) {
        categoriesBackground.style.transform = `translateY(${scroll * 0.05}px)`;
    }
    
    const newsBackground = document.querySelector('.news-wrapper .section-background');
    if (newsBackground) {
        newsBackground.style.transform = `translateY(${scroll * 0.03}px)`;
    }
});

        // Card animations
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.category-card, .news-card').forEach(card => {
                card.style.opacity = '1';
                card.addEventListener('mouseenter', () => {
                    card.style.transform = 'translateY(-5px)';
                    card.style.boxShadow = '0 10px 25px rgba(0, 0, 0, 0.5)';
                    card.classList.add('glitch-active');
                });
                card.addEventListener('mouseleave', () => {
                    card.style.transform = 'none';
                    card.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.1)';
                    card.classList.remove('glitch-active');
                });
            });
        });

        // Intersection observer for section animations
        const sectionObserverOptions = {
            root: null,
            threshold: 0.1
        };
        const sectionObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    if (entry.target.classList.contains('categories')) {
                        entry.target.querySelectorAll('.category-card').forEach(card => card.classList.add('active'));
                    }
                    if (entry.target.classList.contains('latest-news')) {
                        entry.target.querySelectorAll('.news-card').forEach(card => card.classList.add('active'));
                    }
                    observer.unobserve(entry.target);
                }
            });
        }, sectionObserverOptions);
        document.querySelectorAll('.categories, .latest-news').forEach(section => {
            sectionObserver.observe(section);
        });

        // News card hover effects
        const newsSection = {
            init() {
                const observer = new IntersectionObserver(
                    (entries) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                entry.target.classList.add('visible');
                            }
                        });
                    },
                    { threshold: 0.3 }
                );
                document.querySelectorAll('.news-card').forEach(card => {
                    observer.observe(card);
                    this.addHoverEffect(card);
                });
            },
            addHoverEffect(card) {
                let bounds;
                let mouseLeaveDelay;
                const mouseMove = (e) => {
                    const mouseX = e.clientX;
                    const mouseY = e.clientY;
                    const leftX = mouseX - bounds.x;
                    const topY = mouseY - bounds.y;
                    const center = {
                        x: leftX - bounds.width / 2,
                        y: topY - bounds.height / 2
                    };
                    const distance = Math.sqrt(center.x ** 2 + center.y ** 2);
                    card.style.transform = `
                        perspective(1000px)
                        scale3d(1.07, 1.07, 1.07)
                        rotate3d(
                            ${center.y / 100},
                            ${-center.x / 100},
                            0,
                            ${Math.log(distance) * 2}deg
                        )
                    `;
                    card.querySelector('.news-content').style.transform = `
                        translate3d(${center.x * 0.1}px, ${center.y * 0.1}px, 0)
                    `;
                };
                const mouseEnter = () => {
                    bounds = card.getBoundingClientRect();
                    document.addEventListener('mousemove', mouseMove);
                    clearTimeout(mouseLeaveDelay);
                };
                const mouseLeave = () => {
                    document.removeEventListener('mousemove', mouseMove);
                    mouseLeaveDelay = setTimeout(() => {
                        card.style.transform = '';
                        card.querySelector('.news-content').style.transform = '';
                    }, 100);
                };
                card.addEventListener('mouseenter', mouseEnter);
                card.addEventListener('mouseleave', mouseLeave);
            }
        };
        document.addEventListener('DOMContentLoaded', () => {
            newsSection.init();
        });

        // Navigation with auth check
function setupNavigation() {
    const navigationTargets = document.querySelectorAll('.nav-btn');
    navigationTargets.forEach(btn => {
        // Store the original onclick handler if it exists
        const originalOnclick = btn.getAttribute('onclick');
        
        // Override the onclick
        btn.onclick = async function(e) {
            e.preventDefault();
            
            // Get the target path from the original onclick or href
            let path;
            if (originalOnclick && originalOnclick.includes('location.href')) {
                const match = originalOnclick.match(/location\.href\s*=\s*['"]([^'"]*)['"]/);
                path = match ? match[1] : '/';
            } else {
                path = btn.getAttribute('href') || '/';
            }
            
            // Check authentication before navigation
            try {
                const response = await fetch('/api/auth/user');
                if (response.ok) {
                    window.location.href = path;
                } else {
                    console.log('User not authenticated, redirecting to login');
                    window.location.href = '/login';
                }
            } catch (error) {
                console.error('Navigation error:', error);
                window.location.href = '/login';
            }
        };
    });
    
    // Handle read-more links separately
    document.querySelectorAll('.read-more').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const path = this.getAttribute('href') || '/';
            window.location.href = path; // These links don't need auth check
        });
    });
}
        document.addEventListener('DOMContentLoaded', setupNavigation);
    </script>
</body>
</html>