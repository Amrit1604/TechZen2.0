<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || "Admin Support Dashboard" %></title>
    <style>
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Space Grotesk', 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

:root {
    --primary: #0ea5e9;
    --primary-dark: #0284c7;
    --secondary: #64748b;
    --success: #22c55e;
    --danger: #ef4444;
    --warning: #f59e0b;
    --background: #0f172a;
    --surface: #1e293b;
    --surface-dark: #151e2d;
    --text: #e2e8f0;
    --text-secondary: #94a3b8;
    --border: #2d3748;
    --glow: rgba(14, 165, 233, 0.15);
    --grid-size: 20px;
}

body {
    background: var(--background);
    height: 100vh;
    display: grid;
    grid-template-columns: 320px 1fr;
    color: var(--text);
    position: relative;
    overflow: hidden;
}

/* Tech Background Pattern */
body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
        linear-gradient(90deg, var(--background) 20px, transparent 1%) center,
        linear-gradient(var(--background) 20px, transparent 1%) center,
        rgba(14, 165, 233, 0.1);
    background-size: var(--grid-size) var(--grid-size);
    opacity: 0.2;
    z-index: 0;
    animation: gridMove 30s linear infinite;
}

@keyframes gridMove {
    0% { background-position: 0 0; }
    100% { background-position: var(--grid-size) var(--grid-size); }
}

/* Sidebar Styles */
.sidebar {
    background: var(--surface);
    border-right: 1px solid var(--border);
    display: flex;
    flex-direction: column;
    height: 100vh;
    overflow: hidden;
    box-shadow: 4px 0 24px rgba(0, 0, 0, 0.2);
    position: relative;
    z-index: 1;
}

.sidebar::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 2px;
    height: 100%;
    background: linear-gradient(to bottom, var(--primary), transparent);
    opacity: 0.5;
}

.sidebar-header {
    padding: 1.75rem;
    background: linear-gradient(135deg, var(--surface-dark), var(--surface));
    color: var(--text);
    position: relative;
    overflow: hidden;
    border-bottom: 1px solid var(--border);
}

.sidebar-header h2 {
    position: relative;
    z-index: 1;
    text-transform: uppercase;
    letter-spacing: 2px;
    font-weight: 600;
}

.sidebar-header::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: conic-gradient(from 0deg at 50% 50%, transparent 0deg, var(--primary) 60deg, transparent 120deg);
    animation: rotate 8s linear infinite;
    opacity: 0.1;
}

@keyframes rotate {
    100% { transform: rotate(360deg); }
}

.customer-list {
    flex: 1;
    overflow-y: auto;
    padding: 1.25rem;
    scrollbar-width: thin;
    scrollbar-color: var(--primary) var(--surface-dark);
    background: var(--surface-dark);
}

.customer-item {
    padding: 1.25rem;
    border-radius: 12px;
    margin-bottom: 1rem;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border: 1px solid var(--border);
    background: var(--surface);
    position: relative;
    overflow: hidden;
}

.customer-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background: var(--primary);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.customer-item:hover {
    transform: translateX(4px);
    box-shadow: 0 0 20px var(--glow);
    border-color: var(--primary);
}

.customer-item:hover::before {
    opacity: 1;
}

.customer-item.active {
    background: linear-gradient(to right, var(--surface), var(--surface-dark));
    border-color: var(--primary);
    box-shadow: 0 0 30px var(--glow);
}

/* Chat Container Styles */
.chat-container {
    background: var(--surface);
    position: relative;
    z-index: 1;
}

.chat-header {
    padding: 1.5rem 2rem;
    background: var(--surface-dark);
    border-bottom: 1px solid var(--border);
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
}

.chat-header::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 1px;
    background: linear-gradient(to right, var(--primary), transparent);
}

.message {
    max-width: 80%;
    padding: 1.25rem;
    border-radius: 16px;
    position: relative;
    animation: messageAppear 0.3s ease-out;
    backdrop-filter: blur(10px);
}

.customer-message {
    background: rgba(30, 41, 59, 0.8);
    border: 1px solid var(--border);
    border-bottom-left-radius: 4px;
}

.admin-message {
    background: linear-gradient(135deg, rgba(14, 165, 233, 0.2), rgba(2, 132, 199, 0.2));
    border: 1px solid var(--primary);
    color: var(--text);
    align-self: flex-end;
    border-bottom-right-radius: 4px;
}

.chat-input {
    padding: 1.5rem 2rem;
    background: var(--surface-dark);
    border-top: 1px solid var(--border);
    position: relative;
}

input {
    flex: 1;
    padding: 1rem 1.5rem;
    border: 2px solid var(--border);
    border-radius: 12px;
    font-size: 1rem;
    background: var(--surface);
    color: var(--text);
    transition: all 0.3s ease;
}

input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 20px var(--glow);
}

button {
    padding: 1rem 2rem;
    background: var(--primary);
    color: var(--text);
    border: none;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 1px;
    position: relative;
    overflow: hidden;
}

button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 255, 255, 0.2),
        transparent
    );
    transition: 0.5s;
}

button:hover::before {
    left: 100%;
}

button:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
    box-shadow: 0 0 30px var(--glow);
}

.status-badge {
    padding: 0.5rem 1rem;
    border-radius: 24px;
    font-size: 0.875rem;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    position: relative;
    overflow: hidden;
}

.status-badge::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, transparent 45%, rgba(255, 255, 255, 0.1) 50%, transparent 55%);
    animation: shine 3s infinite;
}

.status-active {
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid var(--success);
}

.status-ended {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid var(--danger);
}

.status-waiting {
    background: rgba(245, 158, 11, 0.1);
    border: 1px solid var(--warning);
}

.no-chat {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    background: var(--surface-dark);
    position: relative;
    overflow: hidden;
}

.no-chat::before {
    content: '';
    position: absolute;
    width: 200%;
    height: 200%;
    background: repeating-linear-gradient(
        45deg,
        var(--surface) 0,
        var(--surface) 10px,
        var(--surface-dark) 10px,
        var(--surface-dark) 20px
    );
    opacity: 0.1;
    animation: movePattern 20s linear infinite;
}

@keyframes movePattern {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
}

.main-content {
    display: flex;
    flex-direction: column;
    height: 100vh;
    background: var(--background);
    position: relative;
    flex: 1;
}

.no-chat-selected {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    background: var(--surface-dark);
    position: relative;
    overflow: hidden;
}

#chat-window {
    display: none; /* Initially hidden */
    flex-direction: column;
    height: 100%;
    background: var(--surface-dark);
    opacity: 0;
    transform: translateY(20px);
}

#chat-window.active {
    display: flex; /* Show when active */
    animation: slideIn 0.3s ease-out forwards;
}

.chat-messages {
    flex: 1;
    padding: 2rem;
    overflow-y: auto;
    background: var(--surface-dark);
    display: flex;
    flex-direction: column;
    gap: 1rem;
    scrollbar-width: thin;
    position: relative;
    z-index: 1;
}

@keyframes slideIn {
    to {
        opacity: 1;
        transform: translateY(0);
    }
}
    </style>
</head>
<body>
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>Support Dashboard</h2>
        </div>
        <div class="customer-list" id="customer-list">
            <!-- Customers will be listed here -->
        </div>
    </div>

    <div class="main-content">
        <div id="no-chat" class="no-chat-selected">
            <h2>Select a customer chat</h2>
            <p>Choose a conversation from the sidebar to start helping customers</p>
        </div>
        
        <div id="chat-window" style="display: none; height: 100%;">
            <div class="chat-header">
                <div>
                    <h2 id="current-customer">Customer Name</h2>
                    <div id="customer-email" class="customer-info">customer@email.com</div>
                </div>
                <button id="end-chat">End Chat</button>
            </div>
            <div class="chat-messages" id="chat-messages"></div>
            <div class="chat-input">
                <input type="text" id="message-input" placeholder="Type your message...">
                <button id="send-message">Send</button>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io('/admin');
        let currentCustomer = null;

        // Admin authentication (in a real app, this would be more secure)
        socket.emit('adminLogin', { adminId: 'admin1', password: 'admin123' });

        // Socket event handlers
        socket.on('adminAuthSuccess', () => {
            console.log('Admin authentication successful');
        });

socket.on('customerList', (customers) => {
    const customerList = document.getElementById('customer-list');
    customerList.innerHTML = '';
    
    customers.forEach(customer => {
        const customerElement = document.createElement('div');
        customerElement.className = `customer-item ${customer.id === currentCustomer?.id ? 'active' : ''}`;
        customerElement.dataset.customerId = customer.id;  // Add this line
        customerElement.innerHTML = `
            <div>
                <strong>${customer.username}</strong>
                <span class="status-badge ${customer.status === 'active' ? 'status-active' : 'status-waiting'}">
                    ${customer.status}
                </span>
            </div>
            <div class="customer-info">${customer.email}</div>
            <div class="customer-info">Issue: ${customer.issue.substring(0, 50)}...</div>
        `;
        
        customerElement.addEventListener('click', () => {
            selectCustomer(customer);
        });
        
        customerList.appendChild(customerElement);
    });
});

        socket.on('customerMessage', (data) => {
            if (currentCustomer && data.customerId === currentCustomer.id) {
                renderMessage('customer', data);
            }
            // Flash the customer item in the list if not currently selected
            if (!currentCustomer || data.customerId !== currentCustomer.id) {
                const customerItem = document.querySelector(`[data-customer-id="${data.customerId}"]`);
                if (customerItem) {
                    customerItem.style.backgroundColor = '#ffd700';
                    setTimeout(() => {
                        customerItem.style.backgroundColor = '';
                    }, 1000);
                }
            }
        });

        socket.on('chatHistory', (data) => {
            const messagesContainer = document.getElementById('chat-messages');
            messagesContainer.innerHTML = '';
            data.messages.forEach(msg => {
                renderMessage(msg.type, msg);
            });
        });

        // Helper functions
function selectCustomer(customer) {
    currentCustomer = customer;
    
    // Update UI
    document.getElementById('no-chat').style.display = 'none';
    const chatWindow = document.getElementById('chat-window');
    chatWindow.style.display = 'flex';
    chatWindow.classList.add('active');
    
    document.getElementById('current-customer').textContent = customer.username;
    document.getElementById('customer-email').textContent = customer.email;
    
    // Get chat history
    socket.emit('joinCustomerChat', { customerId: customer.id });
    
    // Update active customer in list
    document.querySelectorAll('.customer-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Add active class to selected customer
    const selectedCustomerItem = document.querySelector(`[data-customer-id="${customer.id}"]`);
    if (selectedCustomerItem) {
        selectedCustomerItem.classList.add('active');
    }
}

        function renderMessage(type, message) {
            const messagesContainer = document.getElementById('chat-messages');
            const messageElement = document.createElement('div');
            messageElement.className = `message ${type}-message`;
            
            messageElement.innerHTML = `
                <div class="message-header">
                    <strong>${type === 'customer' ? message.username : 'Support Agent'}</strong>
                    <span class="message-time">${new Date(message.timestamp).toLocaleTimeString()}</span>
                </div>
                <div class="message-content">${message.message}</div>
            `;
            
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Event listeners
        document.getElementById('send-message').addEventListener('click', sendMessage);
        document.getElementById('message-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        document.getElementById('end-chat').addEventListener('click', () => {
            if (currentCustomer) {
                socket.emit('endChat', { customerId: currentCustomer.id });
                currentCustomer = null;
                document.getElementById('no-chat').style.display = 'flex';
                document.getElementById('chat-window').style.display = 'none';
            }
        });

        function sendMessage() {
            const messageInput = document.getElementById('message-input');
            const message = messageInput.value.trim();
            
            if (message && currentCustomer) {
                socket.emit('adminMessage', {
                    customerId: currentCustomer.id,
                    message: message
                });
                
                renderMessage('admin', {
                    message: message,
                    timestamp: new Date().toISOString()
                });
                
                messageInput.value = '';
            }
        }

        // Add these to the admin1604.ejs script section
socket.on('chatResolved', (data) => {
    console.log('Chat resolved:', data);
    
    // Update the customer item in the list
    const customerItem = document.querySelector(`[data-customer-id="${data.customerId}"]`);
    if (customerItem) {
        // Update badge to resolved
        const statusBadge = customerItem.querySelector('.status-badge');
        if (statusBadge) {
            statusBadge.className = 'status-badge status-active';
            statusBadge.textContent = 'resolved';
        }
    }
    
    // If this is the current customer, show resolution message in chat
    if (currentCustomer && data.customerId === currentCustomer.id) {
        const messagesContainer = document.getElementById('chat-messages');
        const messageElement = document.createElement('div');
        messageElement.className = 'message system-message';
        messageElement.innerHTML = `
            <div class="message-content">Customer marked this issue as resolved</div>
        `;
        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
});

socket.on('chatUnresolved', (data) => {
    console.log('Chat unresolved:', data);
    
    // Similar update logic as above but for unresolved status
    const customerItem = document.querySelector(`[data-customer-id="${data.customerId}"]`);
    if (customerItem) {
        const statusBadge = customerItem.querySelector('.status-badge');
        if (statusBadge) {
            statusBadge.className = 'status-badge status-waiting';
            statusBadge.textContent = 'unresolved';
        }
    }
    
    // System message in chat
    if (currentCustomer && data.customerId === currentCustomer.id) {
        const messagesContainer = document.getElementById('chat-messages');
        const messageElement = document.createElement('div');
        messageElement.className = 'message system-message';
        messageElement.innerHTML = `
            <div class="message-content">Customer marked this issue as unresolved</div>
        `;
        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
});

socket.on('customerEndedChat', (data) => {
    console.log('Customer ended chat:', data);
    
    // Handle customer ending the chat
    if (currentCustomer && data.customerId === currentCustomer.id) {
        const messagesContainer = document.getElementById('chat-messages');
        const messageElement = document.createElement('div');
        messageElement.className = 'message system-message';
        messageElement.innerHTML = `
            <div class="message-content">Customer has left the chat</div>
        `;
        messagesContainer.appendChild(messageElement);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
});


    </script>
</body>
</html>